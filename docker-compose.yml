version: '3.8'

# ACS Web Frontend Docker Compose Configuration
# This file provides different configurations for the web frontend

services:
  # Development service with hot reload
  acs-web-dev:
    build:
      context: .
      target: development
      args:
        NODE_ENV: development
    container_name: acs-web-dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:3000
      - VITE_WS_URL=ws://localhost:3000
      - VITE_APP_VERSION=dev
      - NODE_ENV=development
    networks:
      - acs-web-network
    profiles:
      - development

  # Production service
  acs-web-prod:
    build:
      context: .
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3000}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
        NODE_ENV: production
    container_name: acs-web-prod
    restart: unless-stopped
    ports:
      - "3001:80"
    networks:
      - acs-web-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    profiles:
      - production

  # Staging service
  acs-web-staging:
    build:
      context: .
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-https://staging-api.yourdomain.com}
        VITE_WS_URL: ${VITE_WS_URL:-wss://staging-api.yourdomain.com}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-staging}
        NODE_ENV: production
    container_name: acs-web-staging
    restart: unless-stopped
    ports:
      - "3002:80"
    networks:
      - acs-web-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    profiles:
      - staging

  # Testing service for E2E tests
  acs-web-test:
    build:
      context: .
      target: production
      args:
        VITE_API_URL: http://mock-backend:3000
        VITE_WS_URL: ws://mock-backend:3000
        VITE_APP_VERSION: test
        NODE_ENV: test
    container_name: acs-web-test
    restart: "no"
    ports:
      - "3003:80"
    networks:
      - acs-web-network
    profiles:
      - testing

  # Cypress E2E testing
  cypress:
    image: cypress/included:latest
    container_name: acs-web-cypress
    working_dir: /e2e
    volumes:
      - ./cypress:/e2e/cypress
      - ./cypress.config.ts:/e2e/cypress.config.ts
      - ./cypress/downloads:/e2e/cypress/downloads
      - ./cypress/screenshots:/e2e/cypress/screenshots
      - ./cypress/videos:/e2e/cypress/videos
    environment:
      - CYPRESS_baseUrl=http://acs-web-test:80
      - CYPRESS_video=true
      - CYPRESS_screenshotOnRunFailure=true
    networks:
      - acs-web-network
    depends_on:
      - acs-web-test
    profiles:
      - testing

  # Mock backend for testing
  mock-backend:
    image: mockserver/mockserver:latest
    container_name: acs-web-mock-backend
    ports:
      - "3000:1080"
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializerJson.json
    volumes:
      - ./test/mock-server:/config
    networks:
      - acs-web-network
    profiles:
      - testing

  # Nginx reverse proxy for multiple environments
  nginx-proxy:
    image: nginx:alpine
    container_name: acs-web-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - acs-web-network
    depends_on:
      - acs-web-prod
    profiles:
      - proxy

networks:
  acs-web-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  node_modules:
    driver: local
